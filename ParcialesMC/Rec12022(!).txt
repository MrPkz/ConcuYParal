1) Resolver con SEMÁFOROS el siguiente problema. En un restorán trabajan C cocineros y M mozos. De 
forma repetida, los cocineros preparan un plato y lo dejan listo en la bandeja de platos terminados, mientras 
que los mozos toman los platos de esta bandeja para repartirlos entre los comensales. Tanto los cocineros 
como los mozos trabajan de a un plato por vez. Modele el funcionamiento del restorán considerando que la 
bandeja de platos listos puede almacenar hasta P platos. No es necesario modelar a los comensales ni que 
los procesos terminen.  
NOTA: es el problema de productores/consumidores con tamaño de buffer limitado visto en la página 14 
de la teoría 4. 

sem tamban=P; sem listos=0;
sem mutex=1;
Queue platos; /* O */ Bandeja[P]; int ocupado,libre;

Process Cocinero[id:1..C]{
    dish plato;

    while(true){
        GenerarPlato(plato);
        P(tamban);
        P(mutex);
        //bandeja[libre]=plat; libre=(libre+1)%P;
        //O
        //Push(platos,plato);
        V(mutex);
        V(listos);
    }
}

Process Mozo[id:1..M]{
    dish aux;

    while(true){
        P(listos);
        P(mutex);
        //aux=bandeja[ocupado]; ocupado=(ocupado+1)%P;
        //O
        //Pop(platos,aux);
        V(mutex);
        V(tamban);
        //Hacer su tarea
    }
}

//Este lo hace distinto. Qué onda? CONSULTAR

2) Resolver con MONITORES el siguiente problema. En una planta verificadora de vehículos existen 5 
estaciones de verificación. Hay 75 vehículos que van para ser verificados, cada uno conoce el número de 
estación a la cual debe ir. Cada vehículo se dirige a la estación correspondiente y espera a que lo atiendan. 
Una vez que le entregan el comprobante de verificación, el vehículo se retira. Considere que en cada estación 
se atienden a los vehículos de acuerdo con el orden de llegada. Nota: maximizar la concurrencia.

Process Vehiculo[id:1..75]{
    int est;        //Conocido
    string comprobante;
    Estacion[est].llego(id,comprobante);
}

Process Verificador[id:1..5]{
    string resu;
    int ID;

    while(true){
        Estacion[id].proximo(ID);
        resu=GenerarVerificacion(ID);
        Estacion[id].termine(resu);
    }
}

Monitor Estacion[id:1..5]{
    cond cola;
    cond estamos;
    int presentes=0;        //Al tener una cola no hacia falta
    string com;
    Queue Q;

    Process llego(i:in int, s:out string){
        presentes++;
        Push(Q,i);
        signal(estamos);
        wait(cola);
        s=com;
        signal(estamos);        //TE OLVIDASTE DE ESTE
    }

    Process proximo(i:out int){
        if(presentes==0){wait(estamos);}
        Pop(Q,i);
    }

    Process termine(t:in string){
        com=t;
        presentes--;
        signal(cola);
        wait(estamos);
    }
}